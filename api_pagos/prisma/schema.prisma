// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Empresa {
    id_empresa Int       @id @default(autoincrement())
    nombre     String
    create_at  DateTime  @default(now())
    update_at  DateTime  @default(now())
    delete_at  DateTime?

    cuentas_asociadas Cuenta? //Una empresa puede tener muchas cuentas

    @@map("empresa")
}

model EstadoUsuario {
    id_estado_usuario Int       @id @default(autoincrement())
    nombre            String
    create_at         DateTime  @default(now())
    update_at         DateTime  @default(now())
    delete_at         DateTime?

    usuarios_asociados Usuario[] //Un estado de usuario puede tener muchos usuarios

    @@map("estado_usuario")
}

model Rol{
    id_rol    Int      @id @default(autoincrement())
    nombre    String
    create_at DateTime @default(now())
    update_at DateTime @default(now())
    delete_at DateTime?

    usuarios_asociados Usuario[] //Un rol puede tener muchos usuarios

    @@map("rol")
}

model Usuario {
    id_usuario        Int            @id @default(autoincrement())
    nombre_usuario    String         @unique
    //-----------------------------------------------------------------------------------
    id_estado_usuario Int?
    estado_usuario    EstadoUsuario? @relation(fields: [id_estado_usuario], references: [id_estado_usuario])
    //-----------------------------------------------------------------------------------
    id_rol            Int?
    rol               Rol?           @relation(fields: [id_rol], references: [id_rol])
    //-----------------------------------------------------------------------------------
    email             String         @unique
    password          String
    nombres           String
    apellidos         String
    create_at         DateTime       @default(now())
    update_at         DateTime       @default(now())
    delete_at         DateTime?
    cuenta            Cuenta?

    @@map("usuario")
}

model Cuenta {
    id_cuenta             Int               @id @default(autoincrement())
    //-----------------------------------------------------------------------------------
    id_usuario            Int               @unique
    usuario               Usuario           @relation(fields: [id_usuario], references: [id_usuario])
    //-----------------------------------------------------------------------------------
    //La cuenta pertece a una entidad financiera
    id_entidad_financiera Int
    entidad_financiera    EntidadFinanciera @relation(fields: [id_entidad_financiera], references: [id_entidad_financiera])
    //-----------------------------------------------------------------------------------
    //La cuenta puede pertenecer a una empresa
    id_empresa            Int?              @unique
    empresa               Empresa?          @relation(fields: [id_empresa], references: [id_empresa])
    //-----------------------------------------------------------------------------------
    numero_cuenta         String            @unique
    saldo                 Float             @default(0)
    create_at             DateTime          @default(now())
    update_at             DateTime          @default(now())
    delete_at             DateTime?

    cuenta_origen  Transaccion[] @relation("cuenta_origen")
    cuenta_destino Transaccion[] @relation("cuenta_cestino")
    cuenta_owner   Transaccion[] @relation("cuenta_owner")

    @@map("cuenta")
}

model EntidadFinanciera {
    id_entidad_financiera Int       @id @default(autoincrement())
    nombre                String
    codigo                String
    create_at             DateTime  @default(now())
    update_at             DateTime  @default(now())
    delete_at             DateTime?

    cuentas_asociadas Cuenta[] //Una entidad financiera puede tener muchas cuentas

    @@map("entidad_financiera")
}

model TipoTransaccion {
    id_tipo_transaccion Int       @id @default(autoincrement())
    nombre              String
    create_at           DateTime  @default(now())
    update_at           DateTime  @default(now())
    delete_at           DateTime?

    transacciones_asociadas Transaccion[] //Un tipo de transaccion puede tener muchas transacciones

    @@map("tipo_transaccion")
}

model EstadoTransaccion {
    id_estado_transaccion Int       @id @default(autoincrement())
    nombre                String
    create_at             DateTime  @default(now())
    update_at             DateTime  @default(now())
    delete_at             DateTime?

    transacciones_asociadas Transaccion[]
    @@map("estado_transaccion")
}

model Transaccion {
    id_transaccion        Int               @id @default(autoincrement())
    //-----------------------------------------------------------------------------------
    id_tipo_transaccion   Int
    tipo_transaccion      TipoTransaccion   @relation(fields: [id_tipo_transaccion], references: [id_tipo_transaccion])
    //-----------------------------------------------------------------------------------
    id_cuenta_origen      Int
    cuenta_origen         Cuenta            @relation(fields: [id_cuenta_origen], references: [id_cuenta], name: "cuenta_origen") //Relacion con la cuenta origen
    //-----------------------------------------------------------------------------------
    id_cuenta_destino     Int?
    cuenta_destino        Cuenta?            @relation(fields: [id_cuenta_destino], references: [id_cuenta], name: "cuenta_cestino") //Relacion con la cuenta destino
    //-----------------------------------------------------------------------------------
    id_estado_transaccion Int
    estado_transaccion    EstadoTransaccion @relation(fields: [id_estado_transaccion], references: [id_estado_transaccion])
    //-----------------------------------------------------------------------------------
    //Como puede existir la transaccion igual en la cuenta origen y destino, debido que para
    //una cuenta puede ser una transaccion de ingreso y para otra una transaccion de egreso
    //Se debe de asociar la la cuenta de vista de informacion como cuenta_owner
    id_cuenta_owner       Int
    cuenta_owner          Cuenta            @relation(fields: [id_cuenta_owner], references: [id_cuenta], name: "cuenta_owner")
    //-----------------------------------------------------------------------------------
    monto                 Float
    descripcion           String
    create_at             DateTime          @default(now())
    update_at             DateTime          @default(now())
    delete_at             DateTime?

    @@map("transaccion")
}
